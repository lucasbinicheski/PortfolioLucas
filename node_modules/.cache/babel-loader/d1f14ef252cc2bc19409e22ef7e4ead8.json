{"ast":null,"code":"import { useEffect, useState } from \"react\";\nexport const useInViewport = function (elementRef, unobserveOnIntersect) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const [intersect, setIntersect] = useState(false);\n  const [isUnobserved, setIsUnobserved] = useState(false);\n  useEffect(() => {\n    if (!(elementRef === null || elementRef === void 0 ? void 0 : elementRef.current)) return;\n    const observer = new IntersectionObserver(_ref => {\n      let [entry] = _ref;\n      const {\n        isIntersecting,\n        target\n      } = entry;\n      setIntersect(isIntersecting);\n\n      if (isIntersecting && unobserveOnIntersect) {\n        observer.unobserve(target);\n        setIsUnobserved(true);\n      }\n    }, options);\n\n    if (!isUnobserved) {\n      observer.observe(elementRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [elementRef, unobserveOnIntersect, options, isUnobserved]);\n  return intersect;\n};","map":{"version":3,"sources":["/home/lucas/Documentos/portfolio/PortfolioLucas/src/hooks/useInViewport.js"],"names":["useEffect","useState","useInViewport","elementRef","unobserveOnIntersect","options","intersect","setIntersect","isUnobserved","setIsUnobserved","current","observer","IntersectionObserver","entry","isIntersecting","target","unobserve","observe","disconnect"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,aAAa,GAAG,UACzBC,UADyB,EAEzBC,oBAFyB,EAIxB;AAAA,MADDC,OACC,uEADS,EACT;AACD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,KAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,EAACG,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEO,OAAb,CAAJ,EAA0B;AAE1B,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,QAAa;AAAA,UAAZ,CAACC,KAAD,CAAY;AACnD,YAAM;AAAEC,QAAAA,cAAF;AAAkBC,QAAAA;AAAlB,UAA6BF,KAAnC;AAEAN,MAAAA,YAAY,CAACO,cAAD,CAAZ;;AAEA,UAAIA,cAAc,IAAIV,oBAAtB,EAA4C;AACxCO,QAAAA,QAAQ,CAACK,SAAT,CAAmBD,MAAnB;AACAN,QAAAA,eAAe,CAAC,IAAD,CAAf;AACH;AACJ,KATgB,EASdJ,OATc,CAAjB;;AAWA,QAAI,CAACG,YAAL,EAAmB;AACfG,MAAAA,QAAQ,CAACM,OAAT,CAAiBd,UAAU,CAACO,OAA5B;AACH;;AAED,WAAO,MAAMC,QAAQ,CAACO,UAAT,EAAb;AACH,GAnBQ,EAmBN,CAACf,UAAD,EAAaC,oBAAb,EAAmCC,OAAnC,EAA4CG,YAA5C,CAnBM,CAAT;AAqBA,SAAOF,SAAP;AACH,CA9BM","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport const useInViewport = (\n    elementRef,\n    unobserveOnIntersect,\n    options = {}\n) => {\n    const [intersect, setIntersect] = useState(false);\n    const [isUnobserved, setIsUnobserved] = useState(false);\n\n    useEffect(() => {\n        if (!elementRef?.current) return;\n\n        const observer = new IntersectionObserver(([entry]) => {\n            const { isIntersecting, target } = entry;\n\n            setIntersect(isIntersecting);\n\n            if (isIntersecting && unobserveOnIntersect) {\n                observer.unobserve(target);\n                setIsUnobserved(true);\n            }\n        }, options);\n\n        if (!isUnobserved) {\n            observer.observe(elementRef.current);\n        }\n\n        return () => observer.disconnect();\n    }, [elementRef, unobserveOnIntersect, options, isUnobserved]);\n\n    return intersect;\n};\n"]},"metadata":{},"sourceType":"module"}