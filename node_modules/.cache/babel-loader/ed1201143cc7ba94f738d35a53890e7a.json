{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/portfolio/PortfolioLucas/src/components/background/DisplacementSphere.js\";\nimport React, { useEffect, useRef, useContext } from \"react\";\nimport classNames from \"classnames\";\nimport { Vector2, sRGBEncoding, WebGLRenderer, PerspectiveCamera, Scene, DirectionalLight, AmbientLight, UniformsUtils, UniformsLib, MeshPhongMaterial, SphereBufferGeometry, Mesh } from \"three\";\nimport { spring, value } from \"popmotion\";\nimport innerHeight from \"ios-inner-height\";\nimport vertShader from \"./sphereVertShader\";\nimport fragShader from \"./sphereFragShader\";\nimport { Transition } from \"react-transition-group\";\nimport { usePrefersReducedMotion } from \"../../hooks/usePrefersReducedMotion\";\nimport { useInViewport } from \"../../hooks/useInViewport\";\nimport { reflow } from \"../../utils/transition\";\nimport { media, rgbToThreeColor } from \"../../utils/style\";\nimport { cleanScene, removeLights, cleanRenderer } from \"../../utils/three\";\nimport \"./DisplacementSphere.css\";\nimport { ThemeContext } from \"../theme/ThemeProvider\";\n\nconst DisplacementSphere = props => {\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const rgbBackground = theme === \"light\" ? \"250 250 250\" : \"17 17 17\";\n  const width = useRef(window.innerWidth);\n  const height = useRef(window.innerHeight);\n  const start = useRef(Date.now());\n  const canvasRef = useRef();\n  const mouse = useRef();\n  const renderer = useRef();\n  const camera = useRef();\n  const scene = useRef();\n  const lights = useRef();\n  const uniforms = useRef();\n  const material = useRef();\n  const geometry = useRef();\n  const sphere = useRef();\n  const tweenRef = useRef();\n  const sphereSpring = useRef();\n  const prefersReducedMotion = Boolean(usePrefersReducedMotion() && false); //disabled until switching themes fixed\n\n  const isInViewport = useInViewport(canvasRef);\n  useEffect(() => {\n    mouse.current = new Vector2(0.8, 0.5);\n    renderer.current = new WebGLRenderer({\n      canvas: canvasRef.current,\n      powerPreference: \"high-performance\"\n    });\n    renderer.current.setSize(width.current, height.current);\n    renderer.current.setPixelRatio(1);\n    renderer.current.outputEncoding = sRGBEncoding;\n    camera.current = new PerspectiveCamera(55, width.current / height.current, 0.1, 200);\n    camera.current.position.z = 52;\n    scene.current = new Scene();\n    material.current = new MeshPhongMaterial();\n\n    material.current.onBeforeCompile = shader => {\n      uniforms.current = UniformsUtils.merge([UniformsLib[\"ambient\"], UniformsLib[\"lights\"], shader.uniforms, {\n        time: {\n          type: \"f\",\n          value: 0\n        }\n      }]);\n      shader.uniforms = uniforms.current;\n      shader.vertexShader = vertShader;\n      shader.fragmentShader = fragShader;\n      shader.lights = true;\n    };\n\n    geometry.current = new SphereBufferGeometry(32, 128, 128);\n    sphere.current = new Mesh(geometry.current, material.current);\n    sphere.current.position.z = 0;\n    sphere.current.modifier = Math.random();\n    scene.current.add(sphere.current);\n    return () => {\n      cleanScene(scene.current);\n      cleanRenderer(renderer.current);\n    };\n  }, []);\n  useEffect(() => {\n    const dirLight = new DirectionalLight(rgbToThreeColor(\"250 250 250\"), 0.6);\n    const ambientLight = new AmbientLight(rgbToThreeColor(\"250 250 250\"), theme === \"light\" ? 0.8 : 0.1);\n    dirLight.position.z = 200;\n    dirLight.position.x = 100;\n    dirLight.position.y = 100;\n    lights.current = [dirLight, ambientLight];\n    scene.current.background = rgbToThreeColor(rgbBackground);\n    lights.current.forEach(light => scene.current.add(light));\n    return () => {\n      removeLights(lights.current);\n    };\n  }, [rgbBackground, theme]);\n  useEffect(() => {\n    const handleResize = () => {\n      const canvasHeight = innerHeight();\n      const windowWidth = window.innerWidth;\n      const fullHeight = canvasHeight + canvasHeight * 0.3;\n      canvasRef.current.style.height = fullHeight;\n      renderer.current.setSize(windowWidth, fullHeight);\n      camera.current.aspect = windowWidth / fullHeight;\n      camera.current.updateProjectionMatrix(); // Render a single frame on resize when not animating\n\n      if (prefersReducedMotion) {\n        renderer.current.render(scene.current, camera.current);\n      }\n\n      if (windowWidth <= media.mobile) {\n        sphere.current.position.x = 14;\n        sphere.current.position.y = 10;\n      } else if (windowWidth <= media.tablet) {\n        sphere.current.position.x = 18;\n        sphere.current.position.y = 14;\n      } else {\n        sphere.current.position.x = 22;\n        sphere.current.position.y = 16;\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [prefersReducedMotion]);\n  useEffect(() => {\n    const onMouseMove = event => {\n      const {\n        rotation\n      } = sphere.current;\n      const position = {\n        x: event.clientX / window.innerWidth,\n        y: event.clientY / window.innerHeight\n      };\n\n      if (!sphereSpring.current) {\n        sphereSpring.current = value(rotation.toArray(), values => rotation.set(values[0], values[1], sphere.current.rotation.z));\n      }\n\n      tweenRef.current = spring({\n        from: sphereSpring.current.get(),\n        to: [position.y / 2, position.x / 2],\n        stiffness: 30,\n        damping: 20,\n        velocity: sphereSpring.current.getVelocity(),\n        mass: 2,\n        restSpeed: 0.0001\n      }).start(sphereSpring.current);\n    };\n\n    if (!prefersReducedMotion && isInViewport) {\n      window.addEventListener(\"mousemove\", onMouseMove);\n    }\n\n    return () => {\n      window.removeEventListener(\"mousemove\", onMouseMove);\n\n      if (tweenRef.current) {\n        tweenRef.current.stop();\n      }\n    };\n  }, [isInViewport, prefersReducedMotion]);\n  useEffect(() => {\n    let animation;\n\n    const animate = () => {\n      animation = requestAnimationFrame(animate);\n\n      if (uniforms.current !== undefined) {\n        uniforms.current.time.value = 0.00005 * (Date.now() - start.current);\n      }\n\n      sphere.current.rotation.z += 0.001;\n      renderer.current.render(scene.current, camera.current);\n    };\n\n    if (!prefersReducedMotion && isInViewport) {\n      animate();\n    } else {\n      renderer.current.render(scene.current, camera.current);\n    }\n\n    return () => {\n      cancelAnimationFrame(animation);\n    };\n  }, [isInViewport, prefersReducedMotion]);\n  return /*#__PURE__*/React.createElement(Transition, {\n    appear: true,\n    in: true,\n    onEnter: reflow,\n    timeout: 3000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  }, status => /*#__PURE__*/React.createElement(\"canvas\", Object.assign({\n    \"aria-hidden\": true,\n    className: classNames(\"displacement-sphere\", `displacement-sphere--${status}`),\n    ref: canvasRef\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default DisplacementSphere;","map":{"version":3,"sources":["/home/lucas/Documentos/portfolio/PortfolioLucas/src/components/background/DisplacementSphere.js"],"names":["React","useEffect","useRef","useContext","classNames","Vector2","sRGBEncoding","WebGLRenderer","PerspectiveCamera","Scene","DirectionalLight","AmbientLight","UniformsUtils","UniformsLib","MeshPhongMaterial","SphereBufferGeometry","Mesh","spring","value","innerHeight","vertShader","fragShader","Transition","usePrefersReducedMotion","useInViewport","reflow","media","rgbToThreeColor","cleanScene","removeLights","cleanRenderer","ThemeContext","DisplacementSphere","props","theme","rgbBackground","width","window","innerWidth","height","start","Date","now","canvasRef","mouse","renderer","camera","scene","lights","uniforms","material","geometry","sphere","tweenRef","sphereSpring","prefersReducedMotion","Boolean","isInViewport","current","canvas","powerPreference","setSize","setPixelRatio","outputEncoding","position","z","onBeforeCompile","shader","merge","time","type","vertexShader","fragmentShader","modifier","Math","random","add","dirLight","ambientLight","x","y","background","forEach","light","handleResize","canvasHeight","windowWidth","fullHeight","style","aspect","updateProjectionMatrix","render","mobile","tablet","addEventListener","removeEventListener","onMouseMove","event","rotation","clientX","clientY","toArray","values","set","from","get","to","stiffness","damping","velocity","getVelocity","mass","restSpeed","stop","animation","animate","requestAnimationFrame","undefined","cancelAnimationFrame","status"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useContext } from \"react\";\nimport classNames from \"classnames\";\nimport {\n    Vector2,\n    sRGBEncoding,\n    WebGLRenderer,\n    PerspectiveCamera,\n    Scene,\n    DirectionalLight,\n    AmbientLight,\n    UniformsUtils,\n    UniformsLib,\n    MeshPhongMaterial,\n    SphereBufferGeometry,\n    Mesh,\n} from \"three\";\nimport { spring, value } from \"popmotion\";\nimport innerHeight from \"ios-inner-height\";\nimport vertShader from \"./sphereVertShader\";\nimport fragShader from \"./sphereFragShader\";\nimport { Transition } from \"react-transition-group\";\nimport { usePrefersReducedMotion } from \"../../hooks/usePrefersReducedMotion\";\nimport { useInViewport } from \"../../hooks/useInViewport\";\nimport { reflow } from \"../../utils/transition\";\nimport { media, rgbToThreeColor } from \"../../utils/style\";\nimport { cleanScene, removeLights, cleanRenderer } from \"../../utils/three\";\nimport \"./DisplacementSphere.css\";\nimport { ThemeContext } from \"../theme/ThemeProvider\";\n\nconst DisplacementSphere = (props) => {\n    const { theme } = useContext(ThemeContext);\n    const rgbBackground = theme === \"light\" ? \"250 250 250\" : \"17 17 17\";\n    const width = useRef(window.innerWidth);\n    const height = useRef(window.innerHeight);\n    const start = useRef(Date.now());\n    const canvasRef = useRef();\n    const mouse = useRef();\n    const renderer = useRef();\n    const camera = useRef();\n    const scene = useRef();\n    const lights = useRef();\n    const uniforms = useRef();\n    const material = useRef();\n    const geometry = useRef();\n    const sphere = useRef();\n    const tweenRef = useRef();\n    const sphereSpring = useRef();\n    const prefersReducedMotion = Boolean(usePrefersReducedMotion() && false); //disabled until switching themes fixed\n    const isInViewport = useInViewport(canvasRef);\n\n    useEffect(() => {\n        mouse.current = new Vector2(0.8, 0.5);\n        renderer.current = new WebGLRenderer({\n            canvas: canvasRef.current,\n            powerPreference: \"high-performance\",\n        });\n        renderer.current.setSize(width.current, height.current);\n        renderer.current.setPixelRatio(1);\n        renderer.current.outputEncoding = sRGBEncoding;\n\n        camera.current = new PerspectiveCamera(\n            55,\n            width.current / height.current,\n            0.1,\n            200\n        );\n        camera.current.position.z = 52;\n\n        scene.current = new Scene();\n\n        material.current = new MeshPhongMaterial();\n        material.current.onBeforeCompile = (shader) => {\n            uniforms.current = UniformsUtils.merge([\n                UniformsLib[\"ambient\"],\n                UniformsLib[\"lights\"],\n                shader.uniforms,\n                { time: { type: \"f\", value: 0 } },\n            ]);\n\n            shader.uniforms = uniforms.current;\n            shader.vertexShader = vertShader;\n            shader.fragmentShader = fragShader;\n            shader.lights = true;\n        };\n\n        geometry.current = new SphereBufferGeometry(32, 128, 128);\n\n        sphere.current = new Mesh(geometry.current, material.current);\n        sphere.current.position.z = 0;\n        sphere.current.modifier = Math.random();\n        scene.current.add(sphere.current);\n\n        return () => {\n            cleanScene(scene.current);\n            cleanRenderer(renderer.current);\n        };\n    }, []);\n\n    useEffect(() => {\n        const dirLight = new DirectionalLight(\n            rgbToThreeColor(\"250 250 250\"),\n            0.6\n        );\n        const ambientLight = new AmbientLight(\n            rgbToThreeColor(\"250 250 250\"),\n            theme === \"light\" ? 0.8 : 0.1\n        );\n\n        dirLight.position.z = 200;\n        dirLight.position.x = 100;\n        dirLight.position.y = 100;\n\n        lights.current = [dirLight, ambientLight];\n        scene.current.background = rgbToThreeColor(rgbBackground);\n        lights.current.forEach((light) => scene.current.add(light));\n\n        return () => {\n            removeLights(lights.current);\n        };\n    }, [rgbBackground, theme]);\n\n    useEffect(() => {\n        const handleResize = () => {\n            const canvasHeight = innerHeight();\n            const windowWidth = window.innerWidth;\n            const fullHeight = canvasHeight + canvasHeight * 0.3;\n            canvasRef.current.style.height = fullHeight;\n            renderer.current.setSize(windowWidth, fullHeight);\n            camera.current.aspect = windowWidth / fullHeight;\n            camera.current.updateProjectionMatrix();\n\n            // Render a single frame on resize when not animating\n            if (prefersReducedMotion) {\n                renderer.current.render(scene.current, camera.current);\n            }\n\n            if (windowWidth <= media.mobile) {\n                sphere.current.position.x = 14;\n                sphere.current.position.y = 10;\n            } else if (windowWidth <= media.tablet) {\n                sphere.current.position.x = 18;\n                sphere.current.position.y = 14;\n            } else {\n                sphere.current.position.x = 22;\n                sphere.current.position.y = 16;\n            }\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n        handleResize();\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, [prefersReducedMotion]);\n\n    useEffect(() => {\n        const onMouseMove = (event) => {\n            const { rotation } = sphere.current;\n\n            const position = {\n                x: event.clientX / window.innerWidth,\n                y: event.clientY / window.innerHeight,\n            };\n\n            if (!sphereSpring.current) {\n                sphereSpring.current = value(rotation.toArray(), (values) =>\n                    rotation.set(\n                        values[0],\n                        values[1],\n                        sphere.current.rotation.z\n                    )\n                );\n            }\n\n            tweenRef.current = spring({\n                from: sphereSpring.current.get(),\n                to: [position.y / 2, position.x / 2],\n                stiffness: 30,\n                damping: 20,\n                velocity: sphereSpring.current.getVelocity(),\n                mass: 2,\n                restSpeed: 0.0001,\n            }).start(sphereSpring.current);\n        };\n\n        if (!prefersReducedMotion && isInViewport) {\n            window.addEventListener(\"mousemove\", onMouseMove);\n        }\n\n        return () => {\n            window.removeEventListener(\"mousemove\", onMouseMove);\n\n            if (tweenRef.current) {\n                tweenRef.current.stop();\n            }\n        };\n    }, [isInViewport, prefersReducedMotion]);\n\n    useEffect(() => {\n        let animation;\n\n        const animate = () => {\n            animation = requestAnimationFrame(animate);\n\n            if (uniforms.current !== undefined) {\n                uniforms.current.time.value =\n                    0.00005 * (Date.now() - start.current);\n            }\n\n            sphere.current.rotation.z += 0.001;\n            renderer.current.render(scene.current, camera.current);\n        };\n\n        if (!prefersReducedMotion && isInViewport) {\n            animate();\n        } else {\n            renderer.current.render(scene.current, camera.current);\n        }\n\n        return () => {\n            cancelAnimationFrame(animation);\n        };\n    }, [isInViewport, prefersReducedMotion]);\n\n    return (\n        <Transition appear in onEnter={reflow} timeout={3000}>\n            {(status) => (\n                <canvas\n                    aria-hidden\n                    className={classNames(\n                        \"displacement-sphere\",\n                        `displacement-sphere--${status}`\n                    )}\n                    ref={canvasRef}\n                    {...props}\n                />\n            )}\n        </Transition>\n    );\n};\n\nexport default DisplacementSphere;\n"]},"metadata":{},"sourceType":"module"}