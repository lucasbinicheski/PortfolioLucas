{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/portfolio/PortfolioLucas/src/components/theme/ThemeProvider.js\";\nimport React, { useEffect, useState, createContext } from \"react\";\nimport { LightTheme, DarkTheme } from \"./Themes\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nexport const ThemeContext = createContext();\nexport const ThemeProvider = _ref => {\n  let {\n    children\n  } = _ref;\n\n  const getInitialMode = () => {\n    if (typeof localStorage === \"undefined\") return true;\n    const isReturningUser = (\"dark\" in localStorage);\n    const savedMode = JSON.parse(localStorage.getItem(\"dark\"));\n    const userPrefersDark = getPrefColorScheme();\n\n    if (isReturningUser) {\n      return savedMode;\n    }\n\n    return !!userPrefersDark;\n  };\n\n  const getPrefColorScheme = () => {\n    if (!window.matchMedia) return;\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  };\n\n  const [theme, setTheme] = useState(getInitialMode() ? \"dark\" : \"light\");\n\n  const toggleTheme = () => {\n    if (theme === \"light\") {\n      setTheme(\"dark\");\n    } else {\n      setTheme(\"light\");\n    }\n  };\n\n  useEffect(() => {\n    typeof localStorage !== \"undefined\" && localStorage.setItem(\"dark\", JSON.stringify(theme === \"dark\"));\n  }, [theme]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MuiThemeProvider, {\n    theme: theme === \"light\" ? LightTheme : DarkTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, children));\n};","map":{"version":3,"sources":["/home/lucas/Documentos/portfolio/PortfolioLucas/src/components/theme/ThemeProvider.js"],"names":["React","useEffect","useState","createContext","LightTheme","DarkTheme","MuiThemeProvider","ThemeContext","ThemeProvider","children","getInitialMode","localStorage","isReturningUser","savedMode","JSON","parse","getItem","userPrefersDark","getPrefColorScheme","window","matchMedia","matches","theme","setTheme","toggleTheme","setItem","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,UAAtC;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,OAAO,MAAMC,YAAY,GAAGJ,aAAa,EAAlC;AAEP,OAAO,MAAMK,aAAa,GAAG,QAAkB;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;;AAC3C,QAAMC,cAAc,GAAG,MAAM;AACzB,QAAI,OAAOC,YAAP,KAAwB,WAA5B,EAAyC,OAAO,IAAP;AACzC,UAAMC,eAAe,IAAG,UAAUD,YAAb,CAArB;AACA,UAAME,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACK,OAAb,CAAqB,MAArB,CAAX,CAAlB;AACA,UAAMC,eAAe,GAAGC,kBAAkB,EAA1C;;AACA,QAAIN,eAAJ,EAAqB;AACjB,aAAOC,SAAP;AACH;;AACD,WAAO,CAAC,CAACI,eAAT;AACH,GATD;;AAWA,QAAMC,kBAAkB,GAAG,MAAM;AAC7B,QAAI,CAACC,MAAM,CAACC,UAAZ,EAAwB;AAExB,WAAOD,MAAM,CAACC,UAAP,CAAkB,8BAAlB,EAAkDC,OAAzD;AACH,GAJD;;AAMA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAACQ,cAAc,KAAK,MAAL,GAAc,OAA7B,CAAlC;;AAEA,QAAMc,WAAW,GAAG,MAAM;AACtB,QAAIF,KAAK,KAAK,OAAd,EAAuB;AACnBC,MAAAA,QAAQ,CAAC,MAAD,CAAR;AACH,KAFD,MAEO;AACHA,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACH;AACJ,GAND;;AAQAtB,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAOU,YAAP,KAAwB,WAAxB,IACIA,YAAY,CAACc,OAAb,CAAqB,MAArB,EAA6BX,IAAI,CAACY,SAAL,CAAeJ,KAAK,KAAK,MAAzB,CAA7B,CADJ;AAEH,GAHQ,EAGN,CAACA,KAAD,CAHM,CAAT;AAKA,sBACI,oBAAC,YAAD,CAAc,QAAd;AACI,IAAA,KAAK,EAAE;AACHA,MAAAA,KADG;AAEHE,MAAAA;AAFG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI,oBAAC,gBAAD;AACI,IAAA,KAAK,EAAEF,KAAK,KAAK,OAAV,GAAoBlB,UAApB,GAAiCC,SAD5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKI,QAHL,CANJ,CADJ;AAcH,CA/CM","sourcesContent":["import React, { useEffect, useState, createContext } from \"react\";\nimport { LightTheme, DarkTheme } from \"./Themes\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\n\nexport const ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n    const getInitialMode = () => {\n        if (typeof localStorage === \"undefined\") return true;\n        const isReturningUser = \"dark\" in localStorage;\n        const savedMode = JSON.parse(localStorage.getItem(\"dark\"));\n        const userPrefersDark = getPrefColorScheme();\n        if (isReturningUser) {\n            return savedMode;\n        }\n        return !!userPrefersDark;\n    };\n\n    const getPrefColorScheme = () => {\n        if (!window.matchMedia) return;\n\n        return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    };\n\n    const [theme, setTheme] = useState(getInitialMode() ? \"dark\" : \"light\");\n\n    const toggleTheme = () => {\n        if (theme === \"light\") {\n            setTheme(\"dark\");\n        } else {\n            setTheme(\"light\");\n        }\n    };\n\n    useEffect(() => {\n        typeof localStorage !== \"undefined\" &&\n            localStorage.setItem(\"dark\", JSON.stringify(theme === \"dark\"));\n    }, [theme]);\n\n    return (\n        <ThemeContext.Provider\n            value={{\n                theme,\n                toggleTheme,\n            }}\n        >\n            <MuiThemeProvider\n                theme={theme === \"light\" ? LightTheme : DarkTheme}\n            >\n                {children}\n            </MuiThemeProvider>\n        </ThemeContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}